@using BuildYourself.Domain.Enities;
@{
    ViewData["Title"] = "Home Page";
}

@model IEnumerable<BuildYourself.Domain.Enities.FileItem>

<div class="container">
    <div class="row">
        <div class="col-md-4 order-md-2 mb-4">
            <div class="card">
                <div class="card-body">
                    <form class="needs-validation" id="createFileCategoryForm" method="post" novalidate>
                        <h5 class="text-center">Create a Category</h5>
                        <div class="form-group mb-1">
                            <label for="categoryNameInput">Name:</label>
                            <input name="categoryName" type="text" class="form-control" 
                                   id="categoryNameInput" required>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                        </div>
                        <div class="form-group mb-1">
                            <label for="categoryDescInput">Description:</label>
                            <textarea name="categoryDescription" class="form-control" 
                                      id="categoryDescInput" required></textarea>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                        </div>
                        <div class="mb-2">
                            <input name="categoryIsEntertainment" type="checkbox" value="true" 
                                   class="form-check-input" /> Entertainment
                        </div>
                        <div class="col-12">
                            <button class="btn btn-primary" id="createFileCategory">
                                Submit form
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            <hr />
            <div class="card">
                <div class="card-body">
                    <form class="needs-validation" id="createFileForm" method="post" novalidate>
                        <h5 class="text-center">Create a File</h5>
                        <div class="form-group mb-1">
                            <label for="itemNameInput">Name:</label>
                            <input name="fileName" type="text" class="form-control" id="itemNameInput" required>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                        </div>
                        <div class="form-group mb-1">
                            <label for="itemDescInput">Description:</label>
                            <textarea name="fileDescription" class="form-control" id="itemDescInput" required></textarea>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                        </div>
                        <div class="checkbox mb-2">
                            <label for="selectCategory" class="form-label">Category:</label>
                            <select name="fileCategory" id="selectCategory"
                                    class="form-select selectpicker" data-live-search="true" required>
                                @foreach (var category in ViewBag.Categories)
                                {
                                    <option data-tokens="@category.Text">@category.Text</option>
                                }
                            </select>
                        </div>
                        <div class="col-12">
                            <button class="btn btn-primary" id="createFile" type="submit">
                                Submit form
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            <br />
        </div>
        <div class="col-md-8 order-md-1">

            <div class="input-group rounded" style="max-width:350px">
                <input type="search" class="form-control rounded"
                       onkeyup="FilterTable()" placeholder="Search" id="myInput" />
                <span class="input-group-text border-0" id="search-addon">
                    <i class="fas fa-search"></i>
                </span>
            </div>
            <br />
            <table class="table table-hover" id="tbl">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Category</th>
                        <th>Action</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>

                
                @foreach (var file in Model)
                {
                    <tr id="@file.Name row">
                        <td>@file.Name</td>
                        <td>@file.Description</td>
                        <td>@file.Category.Name</td>
                        <td>
                            @if (file.Status == BuildYourself.Domain.Enums.FileStatus.Uncompleted)
                            {
                                <input id="changeBtn" onclick="changeFileStatus('@file.Name')"
                                       class="btn btn-outline-info" value="Start File" style="width:100px" />
                            }
                            else if (file.Status == BuildYourself.Domain.Enums.FileStatus.InProcess)
                            {
                                <input id="changeBtn" onclick="changeFileStatus('@file.Name')"
                                       class="btn btn-outline-info" value="End File" style="width:100px" />
                            }
                            else
                            {
                                <input id="changeBtn" onclick="changeFileStatus('@file.Name')"
                                       class="btn btn-outline-info" value="Reset" style="width:100px" />
                            }
                        </td>
                        <td>
                            <input id="deleteBtn" class="btn btn-outline-danger" value="Delete" 
                                   style="width:100px" onclick="deleteFile('@file.Name')"/>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            <div class="row">
                <div class="col-6">
                    <h5 class="text-center">Unfinished Files <i class="fa-solid fa-bolt"></i></h5>
                    <ul class="list-group">
                        @foreach (var file in Model)
                        {
                            @if(file.Status == BuildYourself.Domain.Enums.FileStatus.InProcess)
                            {
                                <ul class="list-group list-group-horizontal">
                                    <li class="list-group-item">
                                        <input onclick="changeDescription('@file.Name')" style="width:60px"
                                               class="btn btn-outline-info" value="Save" />
                                    </li>
                                    <li class="list-group-item">
                                        <span>@file.Name</span>
                                    </li>
                                    <li class="list-group-item" style="width:100%">
                                        <input name="fileDescription" style="width:100%"
                                               id="@file.Name Id" value="@file.Description" />
                                    </li>
                                </ul>
                            }
                        }
                    </ul>
                </div>
                <div class="col-6">
                    <h5 class="text-center">The Great Random <i class="fa-solid fa-shuffle"></i></h5>
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-6">
                                    <div class="dropdown">
                                        <button class="btn btn-success dropdown-toggle"
                                                type="button"
                                                id="multiSelectDropdown"
                                                data-bs-toggle="dropdown"
                                                aria-expanded="false">
                                            Select Categories
                                        </button>
                                        <ul class="dropdown-menu"
                                            onchange="handleCB"
                                            aria-labelledby="multiSelectDropdown">
                                            <li>
                                                <label>
                                                    <input type="checkbox"
                                                           value="All Categories">
                                                    All Categories
                                                </label>
                                            </li>
                                            @foreach (var category in ViewBag.Categories)
                                            {
                                                <li>
                                                    <label>
                                                        <input type="checkbox"
                                                               value="@category.Text">
                                                        @category.Text
                                                    </label>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                    <br/>
                                    <button class="btn btn-outline-info" id="generateFile">Generate!</button>
                                </div>
                                <div class="col-6">
                                    <div class="container d-flex h-100">
                                        <div class="row justify-content-center align-self-center" id="generatedFileDiv">
                                            There will be your File!
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="https://kit.fontawesome.com/94804be35d.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://kit.fontawesome.com/yourcode.js" crossorigin="anonymous"></script>
    <script>

        const dropdownButton =
            document.getElementById('multiSelectDropdown');
        const dropdownMenu =
            document.querySelector('.dropdown-menu');
        let mySelectedItems = [];

        function handleCB(event) {
            const checkbox = event.target;
            if (checkbox.checked) {
                mySelectedItems.push(checkbox.value);
            } else {
                mySelectedItems =
                    mySelectedItems.filter((item) => item !== checkbox.value);
            }
            console.log(mySelectedItems.length);
            if (mySelectedItems.length == 0){
                dropdownButton.innerText = 'Select Categories';
            }
            else if (mySelectedItems.includes('All Categories')) {
                dropdownButton.innerText = 'All Categories';
            }
            else if (mySelectedItems.length == 1){
                dropdownButton.innerText = '1 Category';
            }
            else{
                dropdownButton.innerText = mySelectedItems.length + ' Categories';
            }
        }

        dropdownMenu.addEventListener('change', handleCB);

        (function () {
            'use strict'
            var forms = document.querySelectorAll('.needs-validation')

            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }
                        form.classList.add('was-validated')
                    }, false)
                })
        })()

        function FilterTable() {
            var input, filter, table, tr, td, i, txtValue;
            input = document.getElementById("myInput");
            filter = input.value.toUpperCase();
            table = document.getElementById("tbl");
            tr = table.getElementsByTagName("tr");

            for (i = 1; i < tr.length; i++) {
                tr[i].style.display = "none";
                td = tr[i].getElementsByTagName("td");
                for (var j = 0; j < td.length; j++) {
                    cell = tr[i].getElementsByTagName("td")[j];
                    if (cell) {
                        if (cell.innerText.toUpperCase().indexOf(filter) > -1) {
                            tr[i].style.display = "";
                            break;
                        }
                    }
                }
            }
        }

        $(function () {
            $('.selectpicker').selectpicker();
        });

        function changeDescription(fileName) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("UpdateFileDescription", "File")',
                data: {
                    FileName: fileName, 
                    FileDescription: document.getElementById(fileName + ' Id').value
                },
                success: function (response) {
                    Swal.fire({
                        title: "Information",
                        icon: "success",
                        title: response.description,
                    }).then((result) => {
                        location.reload() 
                    });
                },
                error: function (response) {
                    Swal.fire({
                        title: "Information",
                        text: response.responseJSON.description,
                        icon: "error"
                    });
                }
            })
        }

        function changeFileStatus(fileName){
            $.ajax({
                type: 'POST',
                url: '@Url.Action("ChangeFileStatus", "File")',
                data: { FileName: fileName },
                success: function (response) {
                    location.reload()
                },
                error: function (response) {
                    Swal.fire({
                        title: "Information",
                        text: response.responseJSON.description,
                        icon: "error"
                    });
                }
            })
        }

        function deleteFile(fileName){
            $.ajax({
                type: 'DELETE',
                url: '@Url.Action("DeleteFile", "File")',
                data: {FileName: fileName},
                success: function (response){
                    let rowId = fileName + ' row';
                    var row = document.getElementById(rowId);
                    row.parentNode.removeChild(row);
                },
                error: function (response){
                    Swal.fire({
                        title: "Information",
                        text: response.responseJSON.description,
                        icon: "error"
                    });
                }
            })
        }

        $('#generateFile').on('click', function (e) {
            e.preventDefault();
            var params = {
                    filters: [
                        ''
                    ]
                };
            var i = 0;
            for( str in mySelectedItems.values ){
                params.filters[i] = str.value;
                i++;
            }

            $.ajax({
                type: 'POST',
                url: '@Url.Action("GenerateFile", "File")',
                data: { filters: mySelectedItems },
                success: function(response){
                    fileDiv = document.getElementById('generatedFileDiv');
                    fileDiv.innerHTML = response.description;
                },
                error: function(response){
                    Swal.fire({
                        title: "Information",
                        text: response.responseJSON.description,
                        icon: "error"
                    });
                }
            })
        });

        $('#createFileCategory').on('click', function (e) {
            e.preventDefault();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("CreateCategory", "File")',
                data: $('#createFileCategoryForm').serialize(),
                success: function(response){
                    select = document.getElementById('selectCategory');
                    name = document.getElementById('categoryNameInput').value;
                    var opt = document.createElement('option');

                    opt.value = name;
                    opt.text = name;
                    opt.id = name;
                    select.appendChild(opt);

                    Swal.fire({
                        title: "Information",
                        text: response.description,
                        icon: "success"
                    });
                },
                error: function(response){
                    Swal.fire({
                        title: "Information",
                        text: response.responseJSON.description,
                        icon: "error"
                    });
                }
            })
        });

        $('#createFile').on('click', function (e) {
            e.preventDefault();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("CreateFile", "File")',
                data: $('#createFileForm').serialize(),
                success: function(response){
                    Swal.fire({
                        title: "Information",
                        text: response.description,
                        icon: "success"
                    });

                    var table = document.getElementById("tbl");
                    row = table.insertRow();

                    let nameCell = row.insertCell(0);
                    let descriptionCell = row.insertCell(1);
                    let categoryCell = row.insertCell(2);
                    let actionCell = row.insertCell(3);
                    let deleteCell = row.insertCell(4);

                    var nameText = document.createTextNode(document.getElementById('itemNameInput').value);
                    nameCell.appendChild(nameText);

                    var descriptionText = document.createTextNode(document.getElementById('itemDescInput').value);
                    descriptionCell.appendChild(descriptionText);

                    var categoryText = document.createTextNode(document.getElementById('selectCategory').value);
                    categoryCell.appendChild(categoryText);

                    var actionInput = document.createElement('input');
                    actionInput.value = "Start File";
                    actionInput.type = "button";
                    actionInput.style.width = "100px";
                    actionInput.setAttribute('class', "btn btn-outline-info");
                    actionInput.onclick = function dofun() {
                        var parameters = {
                            FileName: document.getElementById('itemNameInput').value
                        };
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("ChangeFileStatus", "File")',
                            data: parameters,
                            success: function (response) {
                                if(newinp.value == "Start File"){
                                    newinp.value = "End File";
                                }
                                else if (newinp.value == "End File") {
                                    newinp.value = "Reset";
                                }
                                else {
                                    newinp.value = "Start File";
                                }
                            },
                            error: function (response) {
                                Swal.fire({
                                    title: "Error",
                                    text: "Something went wrong. We can't change status",
                                    icon: "error"
                                });
                            }
                        });
                    };
                    actionCell.appendChild(actionInput);

                    var deleteInput = document.createElement('input');
                    deleteInput.value = "Delete";
                    deleteInput.type = "button";
                    deleteInput.style.width = "100px";
                    deleteInput.setAttribute('class', "btn btn-outline-danger");
                    deleteCell.appendChild(deleteInput);
                },
                error: function(response){
                    Swal.fire({
                        title: "Information",
                        text: response.responseJSON.description,
                        icon: "error"
                    });
                }
            })
        });
    </script>
}